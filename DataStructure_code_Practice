1. Merge Sort 

var sortArray = function(arr,l,mid,r) {
  int i = l;
  int j = mid + 1;
  int k = l;
  while(i<mid&&j<=r){
      if(a[i<=a[j]]){
          b[k] = a[i];
          i++;
      }else{
          b[k] = a[j];
          j++;
      }
      k++;
  }
    if(i>mid){
        while(j<=r){
            b[k] = a[j];
            j++;
            k++;
        }
    }else{
        while(i<=mid){
            b[k] = a[i];
            i++;
            k++;
        }
        for(k=l;k<=r;k++){
            a[k] = b[k];
        }
    }
};

2. Quick Sort

let sortArray = (arr) => {
  if(arr.length<=1){
      return arr;
  }else{
      let left = [];
      let right= [];
      let new  = [];
      let pivot = arr.pop();
      for(i=0;i<arr.length;i++){
          if(arr[i]<=pivot){
              left.push(arr[i])
          }else{
               right.push(arr[i])
          }
      }
      return new.concat(sortArray(left),pivot,sortArray(right));
  }
};

3. Selection Sort

let sortArray = (arr) => {
 for(i=0;i<arr.length-1;i++){
     let minIndex = i;
     for(j=i+1;j<arr.length;j++){
         if(arr[minIndex]>arr[j]){
             minIndex = j;
         }
     }
     const temp = arr[i];
     arr[i]=arr[minIndex];
     arr[minIndex]=temp;
 }
    return arr;
};


4. Bubble Sort 

let bubbleSort = arr => {
for(i=0;i<arr.length-1;i++){
for(j=1;j<arr.length-1-i;j++){
if(arr[j] > arr[j+1]){
     const temp = arr[j];
     arr[j]=arr[j+1];
     arr[j+1]=temp;
}
}
}
return arr;
}

5. Find Peak Element in an array

var findPeakElement = function(arr) {
    if(arr.length==1) return 0;
    if(arr[0]>=arr[1]) return 0;
    if(arr.length-1>=arr.length-2) return arr.length-1;
    for(let i=1;i<arr.length-1;i++){
        if(arr[i]>=arr[i-1]&&arr[i]>=arr[i+1]) 
        return i;
    }
};

6. Maximum and minimum array

const largest = (arr) => {
  let max = arr[0];
  let min = arr[0];
  for (let i = 1; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i]
    }else if(arr[i]<min){
      min = arr[i]
    }
  }
  return max;
}


7. Reverse an array

const reverse = (arr) => {
    let newArray = [];
    for(i=arr.length-1;i>=0;i--){
        newArray.push(arr[i])
    }
    return newArray;  
}


8. largest kth element


const getKthSmallest = (arr, k) => {
  arr.sort(arr); // sorting ke liye koi bhi algo ------ prefered quick sort
  return arr[k - 1];
}

9. find frequency 

  findFrequency(v, n, x){
    let v = 0;
    for(let i=0;i<v.size();i++){
        if(x == v[i]){
            v++;
        }
    }
       return v; 
    }


10. find common elm in sorted 2 arrays

const commonElements = ({arr1, arr2, arr3, n1, n2,n3}) => {
        let i = 0;
        let j = 0;
        let k = 0;
        while(i<n1&&j<n2&&k<n3){
            if (arr1[i] === arr2[j] && arr2[j] === arr3[k]) {
              document.write(ar1[i] + " ");
                i++; j++; k++;
            }
            else if (arr1[i] < arr2[j]) {
                i++;
            }
            else if (arr2[j] < arr3[k]) {
                j++;
            }
            else {
                k++;
            }
        }
    }

let arr1 = [1, 5, 10, 20, 40, 80]
let n1 = arr1.length; 
let arr2 = [6, 7, 20, 80, 100]
let n2 = arr2.length;
let arr3 = [3, 4, 15, 20, 30, 70, 80, 120]
let n3 = arr3.length; 
console.log(commonElements(arr1, arr2, arr3, n1, n2,n3))

11. first repeating element in an array

function printFirstRepeating(arr) {
  let min = -1;
  let set = new Set();
  for (let i = arr.length - 1; i >= 0; i--) {
    if (set.has(arr[i]))
      min = i;
    else
      set.add(arr[i]);
  }
  if (min !== -1)
    console.log(arr[min]);
  else
    console.log("There are no repeating elements");
}
let arr = [10, 9, 4, 9, 3, 5, 6];
printFirstRepeating(arr);


12. (Kadaneâ€™s Algorithm)Largest Sum Contiguous Subarray *****************important

int maxSubarraySum(int arr[], int n){
        int maxSoFar = arr[0];
        int currMax = arr[0];
        for(int i=1;i<n;i++){
            currMax = max(arr[i],currMax+arr[i]);
            maxSoFar = max(maxSoFar,currMax);
        }
        return maxSoFar;
    }

13. Factorial of Large Number

const factorial = (n) => {
       if(n==1){
       return 1;
       }else if(n===0) {
           return 1;
       }else{
           return n * factorial(n-1);
       }
    };
console.log(factorial(30))


**************************

1. DOM and its usage
2. virtual Dom
3. redux
4. js functions
5. memoization JavaScript react
6. CSS questions
7.string reverse

**************************

14. Count Triplets 

function countTriplets(arr){
       let sorted = arr.sort();
       let count = 0;
       
       for(let i=sorted.length-1;i>=2;i--){
           let l = 0;	
           let r = i-1;
           
           while(l<r){
               if(sorted[l] + sorted[r] == sorted[i]){
                   count = count + 1;
                   l = l + 1;
                   r = r - 1;
               }else if(sorted[l] + sorted[r] < sorted[i]){
                   l = l + 1;
               }else{
                   r = r - 1;
               }
           }
       }
       return count;

15. Spirally print the array matrix


 let spirallyTraverse = (m, n, arr) =>{
    let i, k = 0, l = 0;
    while (k < m && l < n) {
        for (i = l; i < n; ++i) {
            document.write(arr[k][i]);
        }
        k++;
        for (i = k; i < m; ++i) {
            document.write(arr[i][n - 1]);
        }
        n--;
        if (k < m) {
            for (i = n - 1; i >= l; --i) {
                document.write(arr[m - 1][i]);
            }
            m--;
        }
        if (l < n) {
            for (i = m - 1; i >= k; --i) {
                document.write(arr[i][l]);
            }
            l++;
        }}};
    
let arr = [[ 1, 2, 3, 4 ],
 [ 5, 6, 7, 8 ],
 [ 9, 10, 11, 12 ],
 [ 13, 14, 15, 16 ]];
let m = arr.length;
let n = arr[0].length;
  
console.log(spirallyTraverse(m, n, arr));

16. Reverse in groups

reverseInGroups(arr, n, k){
       for(let i=0;i<n;i+=k){
           let left = i;
           let right = Math.min(i+k-1,n-1);
           let temp;
           while(left<right){
               temp=arr[left];
               arr[left]=arr[right];
               arr[right]=temp;
               left += 1;
               right -= 1;
           }
       }
       return arr;
    };

17. Find Middle element in the LL

 int getMiddle(Node *head)
    {
        struct Node * fast = head;
        struct Node * slow = head;
        if(head == NULL){
            return -1;
        }
        while(fast != NULL && fast -> next != NULL){
            fast = fast -> next -> next;
            slow = slow -> next;
        }
        return slow -> data;
    }


18. Reverse a Linked List in groups of given size

struct node *reverse (struct node *head, int k)
    { 
        struct node* prev = NULL;
        struct node* curr = head;
        struct node* next = curr;
        int count = 0;
        while(curr!= NULL && count<k){
            curr=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
            count++;
        }
        if(next!=NULL)
        head->next = reverse(next,k);
        return prev;
    }

19. Rotate a Linked List


 Node* rotate(Node* head, int k)
    {
        if(head == NULL || head.next == NULL || k == 0)
        return head;
        
        Node* cur = head;
        int len = 1;
        while(cur.next != NULL){
            len++;
            cur = cur.next;
        }
        
        cur.next = head;
        k = k%len;
        k = len-k;
        while(k--)
        cur = cur->next;
        head = cur->next;
        cur->next = NUll;
        return head;
    }

20. Merge two Sorted LL

Node* sortedMerge(Node* head1, Node* head2)  
{  
    Node*p1 = head1;
    Node*p2 = head2;
    Node*dummyNode = new Node(-1);
    Node*p3 = dummyNode;
    
    while(p1!=NULL&&p2!=NULL){
        if(p1->data<p2->data){
            p3->next=p1;
            p1=p1->next;
        }else{
            p3->next=p2;
            p2=p2->next;
        }
        p3=p3->next;
    }
    while(p1!=NULL){
        p3->next=p1;
        p1=p1->next;
        p3=p3->next;
    }
    while(p2!=NULL){
        p3->next=p2;
        p2=p2->next;
        p3=p3->next;
    }
    return dummyNode->next;
};  

21. Detect Loop in a LL

bool detectLoop(Node* head){
        struct Node *slow = head,*fast = head;
        while(slow&&fast&&fast->next){
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast){
                return true;
            }
        }
        return false;
    }


22. Check ll is palindrome

bool isPalindrome(Node *head){
        Node*slow=head;
        stack<int>s;
        while(slow!=NULL){
            s.push(slow->data);
            slow=slow->next;
        }
        while(head!=NULL){
            int topEl = s.top();
            s.pop();
            if(head->data!=topEl){
                return 0;
            }
            head=head->next;
        }
        return 1;
    }

23. Sort Linklist of 0s 1s and 2s

 void insertAtTail(Node* &tail, Node* curr ) {
    tail -> next = curr;
    tail = curr;
}

    Node* segregate(Node *head) {
        
    Node* zeroHead = new Node(-1);
    Node* zeroTail = zeroHead;
    Node* oneHead = new Node(-1);
    Node* oneTail = oneHead;
    Node* twoHead = new Node(-1);
    Node* twoTail = twoHead;
    
    Node* curr = head;
    
    // create separate list 0s, 1s and 2s
    while(curr != NULL) {
        
        int value = curr -> data;
        
        if(value == 0) {
            insertAtTail(zeroTail, curr);
        }
        else if(value == 1) {
            insertAtTail(oneTail, curr);
        }
        else if(value == 2) {
            insertAtTail(twoTail, curr);
        }       
        curr = curr -> next;
    }
    
    //merge 3 sublist
    
    // 1s list not empty
    if(oneHead -> next != NULL) {
        zeroTail -> next = oneHead -> next;
    }
    else {
        //1s list -> empty
        zeroTail -> next = twoHead -> next;
    }
    
    oneTail -> next = twoHead -> next;
    twoTail -> next = NULL;
    
	//setup head 
    head = zeroHead -> next;
    
    //delete dummy nodes
    delete zeroHead;
    delete oneHead;
    delete twoHead;
    
    return head;
        
    }
